from __future__ import print_function
import datetime
import glob
import sys
import re
import os

print("hallo aus extract_test_cases")


# this c-comment will be written to the beginning of all files generated
do_not_edit_message = "//This file was autogenerated by the "+__file__+" script on "+str(datetime.datetime.now())+", \n//do not modify this manually, as it will be lost.\n"

def get_file_as_string(filename):

    with open(filename, 'r') as f:
        data = f.read()
    
    return data

def remove_c_line_comments(sourcecode):

    rex = r"//.*"
    return re.sub(rex, " ", sourcecode)

def remove_c_block_comments(sourcecode):

    rex = r"/\*(?:[^*]|\*+[^/])*\*+/"
    return re.sub(rex, " ", sourcecode)

def extract_tests(code_filename):

    sourcecode, filename = code_filename

    group_rex = r"TEST_GROUP\s*\(\s*(\S+)\s*\)"
    groups = map(lambda m : m.group(1), re.finditer(group_rex, sourcecode))

    test_case_rex = r"TEST\s*\(\s*(\S+)\s*,\s*(\S+)\s*\)"
    test_cases = map(lambda m : m.group(1,2), re.finditer(test_case_rex, sourcecode))

    groups_with_test_cases = {group : [] for group in groups}

    global warnings
    for group_name, test_case_name in test_cases:
        if group_name not in groups_with_test_cases.keys():
            print("WARNING: found test case TEST("+group_name+","+test_case_name+") in file "+filename+", but no TEST_GROUP("+group_name+"). The Test will not be run.")
            warnings += 1
            continue
        groups_with_test_cases[group_name].append(test_case_name)
        
    for name, cases in groups_with_test_cases.items():

        if len(cases) == 0:
            print("WARNING: Found group TEST_GROUP("+name+") in file "+filename+" but it has no tests associated with it.")
            warnings += 1

    return groups_with_test_cases

def merge_test_group_dicts( dic_iter ):

    res = {}

    for d in dic_iter:
        for k,v in d.items():
            if k not in res.keys():
                res[k] = v
            else:
                print("ERROR: TEST_GROUP("+str(k)+") found in multiple _test.c files, this is not allowed by the Unity Testframework, test group names are global. Exiting")
                sys.exit(1)

    return res

def get_world_size_requests(group_names):

    max_world_size = 1

    name_to_sizes = {} # group_name -> list of requested world-sizes

    rex = r"w((?:[1-9][0-9]*(?:_|$))+)"
    for name in group_names:
        match = re.search(rex, name)
        if not match:
            print(name+" does not specify number of ranks to run on, defaulting to 1")
            name_to_sizes[name] = [1]
            continue
        m = match.group(1)
        numbers = list(map(lambda x : int(x), m.split("_")))
        name_to_sizes[name] = numbers
        max_world_size = max(max_world_size, max(numbers))
    
    return name_to_sizes, max_world_size

def invert_names_and_sizes(group_name_to_size_list):

    size_to_group_names = {}

    for group_name, size_list in group_name_to_size_list.items():
        for size in size_list:
            if size not in size_to_group_names.keys():
                size_to_group_names[size] = [group_name]
            else:
                size_to_group_names[size].append(group_name)

    return size_to_group_names



if __name__ == "__main__":


    this_script_path = os.path.realpath(__file__)
    this_script_dir = "/".join((this_script_path.split("/")[0:-1]))

    old_cwd = os.getcwd()
    os.chdir(this_script_dir)

    warnings = 0
    test_files = glob.glob("*_test.c")


    file_conts = map(get_file_as_string, test_files)

    file_conts_no_comments = map(remove_c_line_comments, map( remove_c_block_comments, file_conts))

    test_group_with_cases = merge_test_group_dicts(map(extract_tests, zip(file_conts_no_comments, test_files)))
    
    name_to_sizes, max_world_size = get_world_size_requests(test_group_with_cases.keys())

    size_to_names = invert_names_and_sizes(name_to_sizes)



    total_test_cases = sum(map( lambda kv : len(kv[1]), test_group_with_cases.items()))
    if (total_test_cases == 0):
        print("ERROR: extracting test cases did not find a single test case.")
        exit(-1)

    print("found "+str(len(test_files))+" files ", end="")
    print("that have "+str(len(test_group_with_cases.keys()))+" test groups together")
    print("total test-cases: "+str(total_test_cases))
    print("to execute all tests, "+str(max_world_size)+" ranks will be required")

    os.chdir(old_cwd)
    print("cwd: "+str(os.getcwd()))

    with open(os.getcwd()+"/run_unit_tests.c", "w") as f:
        f.write(do_not_edit_message)
        f.write("#include <mpi.h>\n")
        f.write("#include \""+this_script_dir+"/unity_fixture.h\"\n\n\n")
        f.write("void run_all_unit_tests(void);\n\n\n")

        for groupname, testlist in test_group_with_cases.items():

            f.write("TEST_GROUP_RUNNER("+groupname+")\n{\n")

            for test in testlist:
                f.write("    RUN_TEST_CASE("+groupname+","+test+");\n")

            f.write("}\n\n\n")

        f.write("void run_all_unit_tests(void)\n{\n")
        f.write("\tint participate;\n")
        for size in sorted(size_to_names):
            f.write("\tparticipate = change_test_world_size("+str(size)+");\n")
            f.write("\tif (participate!=0 && participate != 1) {return;}\n")
            f.write("\tif (participate==1)\n\t{\n")
            for group_name in size_to_names[size]:
                f.write("\t\tRUN_TEST_GROUP("+group_name+");\n")
            f.write("\t}\n")
        f.write("}\n\n\n\n")


        print(os.path.abspath("extract_test_cases.py"))

    if (warnings > 0):
        print(__file__+" finished with "+str(warnings)+" warnings")
    sys.exit(warnings)

