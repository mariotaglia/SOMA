#!/usr/bin/env python

#   Copyright (C) 2016-2017 Ludwig Schneider
#
# This file is part of SOMA.
#
# SOMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SOMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with SOMA.  If not, see <http://www.gnu.org/licenses/>.
import sys
sys.path.append(@SOMA_PYTHON_DIR@)
import h5py
import argparse
import subprocess as sp
import numpy as np
SOMA = "@CMAKE_CURRENT_BINARY_DIR@/../c_src/SOMA"
CONFGEN = "@CMAKE_CURRENT_BINARY_DIR@/../python_src/ConfGen.py"
from statistics import check_value

def convert_files():
    ret = sp.call([CONFGEN,"-i","structure_factor.xml"])
    if ret != 0: raise RuntimeError("Test failed")

def run():
    ret = sp.call([SOMA,"-c","structure_factor.h5","-t","10"])
    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call(["mv","end.h5","structure_factor.h5"])
    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call([SOMA,"-c","structure_factor.h5","-t","100","-a","structure_factor_ana.h5"])
    if ret != 0: raise RuntimeError("Test failed")

def test():
    with h5py.File('structure_factor.h5', 'r') as hf_config:
        poly_arch = np.array(hf_config['/parameter/poly_arch'])
        n_mono = poly_arch[0] # First element contains number of monomers for homopolymers.
        n_particle_types = np.array(hf_config['/parameter/n_types'])[0]
        n_poly_types = np.array(hf_config['/parameter/n_poly_type'])[0]
        
        with h5py.File('structure_factor_ana.h5', 'r') as hf_ana:
            static_structure_factor= np.array(hf_ana['/static_structure_factor'])
            dynamical_structure_factor= np.array(hf_ana['/dynamical_structure_factor'])
            static_q_vec = np.array(hf_ana['/static_structure_factor'].attrs['q'])
            static_ave = np.mean(static_structure_factor, axis=0) # time/ensemble average.

            # collective static structure factor of binary blend in http://arxiv.org/abs/cond-mat/0501076v1 p.28 eq.91.
            x = static_q_vec**2 / 6.0
            static_ana = 2 * (np.exp(-x) - 1 + x) / x**2 
            static_ana = n_mono * static_ana
            print len(dynamical_structure_factor),len(dynamical_structure_factor[0]),len(dynamical_structure_factor[0][0])

            for q_index in range(len(static_q_vec)):
                for poly_type_index in range(n_poly_types):
                    check_value(float(static_ave[q_index, poly_type_index, poly_type_index * n_particle_types + poly_type_index]), 1e-1, float(static_ana[q_index]), "homo static structure factor ")    
                    check_value(dynamical_structure_factor[0][q_index][poly_type_index][0], 1e-1,static_structure_factor[0][q_index][poly_type_index][0], "homo dynamical structure factor ")

def main_test():
    convert_files()
    run()
    test()

if __name__ == "__main__":
    main_test()
