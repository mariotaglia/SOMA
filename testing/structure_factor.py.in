#!/usr/bin/env python

#   Copyright (C) 2016-2017 Ludwig Schneider
#
# This file is part of SOMA.
#
# SOMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SOMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with SOMA.  If not, see <http://www.gnu.org/licenses/>.
import sys
sys.path.append(@SOMA_PYTHON_DIR@)
import h5py
import argparse
import subprocess as sp
import numpy as np
SOMA = "@CMAKE_CURRENT_BINARY_DIR@/../c_src/SOMA"
CONFGEN = "@CMAKE_CURRENT_BINARY_DIR@/../python_src/ConfGen.py"

def convert_files():
    ret = sp.call([CONFGEN,"-i","structure_factor.xml"])
    if ret != 0: raise RuntimeError("Test failed")

def run(test):
#    ret = sp.call([SOMA,"-c","structure_factor.h5","-t","10000"])
#    if ret != 0: raise RuntimeError("Test failed")
#    ret = sp.call(["mv","end.h5","structure_factor.h5"])
#    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call([SOMA,"-c","structure_factor.h5","-t","100","-a","structure_factor_ana.h5"])
    if ret != 0: raise RuntimeError("Test failed")

def test():
    print("test")
    with h5py.File('structure_factor_ana.h5', 'r') as f:
        static_structure_factor= np.array(f['/static_structure_factor'])
        #print(static_structure_factor)
        dynamical_structure_factor= np.array(f['/dynamical_structure_factor'])
        
        static_q_vec = np.array(f['/static_structure_factor'].attrs['q'])
        static_ave = np.mean(static_structure_factor, axis=0) # time/ensemble average.
        # collective static structure factor of binary blend in http://arxiv.org/abs/cond-mat/0501076v1 p.28 eq.91.
        x = static_q_vec**2 / 6.0
        static_ana = 2 * (np.exp(-x) - 1 + x) / x**2 
        static_ana = 32.0 / static_ana

        print("Static_ave = ", static_ave)
        print("Static_q_vec = ", static_q_vec)
        print("Static_ana = ", static_ana)

def main_test():
    #convert_files()
    #run("")
    test()

if __name__ == "__main__":
    main_test()
