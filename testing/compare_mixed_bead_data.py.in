@SOMA_PYTHON_SHEBANG@

#   Copyright (C) 2016-2019 Ludwig Schneider
#
# This file is part of SOMA.
#
# SOMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SOMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with SOMA.  If not, see <http://www.gnu.org/licenses/>.

import sys
sys.path.append( @SOMA_PYTHON_DIR@ )
import numpy
import h5py

def get_bead_data(filename):
    with h5py.File(filename,"r") as f:
        data = f["/beads"][:]
        Npoly = f["/parameter/n_polymers"][0]
        poly_type = f["/poly_type"][:]
        poly_arch = f["/parameter/poly_arch"][:]
        poly_type_offset = f["/poly_type_offset"][:]
    Ns = np.zeros( Npoly,dtype=int )
    for i in range(Npoly):
        Ns[i] = poly_arch[ poly_type_offset[ poly_type[i] ]]

    conv_data = numpy.zeros(shape= (Npoly,max(Ns),3))
    bead_counter = 0
    for i in range(Npoly):
        for j in range(Ns[i]):
            conv_data[i,j] = data[bead_counter]
            bead_counter += 1
    return conv_data

def get_best_match_diff(poly,beads,epsilon):
    min_diff = numpy.mean((beads[0] - poly)**2)
    min_id = 0
    for i in range(beads.shape[0]):
        diff = numpy.mean((beads[i] - poly)**2)
        if diff < min_diff:
            min_diff = diff
            min_id = i
        if diff < epsilon:
            return diff
    return min_diff

def main(argv):
    if len(argv) != 3:
        print("Usage: ./compare_mixed_bead_data.py file1.h5 file2.h5")
        return -1

    data1 = get_bead_data(argv[1])
    data2 = get_bead_data(argv[2])

    if data1.shape != data2.shape:
        print("Shape of the bead does not match.")
        return -2
    diff = 0.
    for i in range(data1.shape[0]):
        diff += get_best_match_diff( data1[i], data2, 1e-5)
    diff /= data1.shape[0]

    print(diff)
    if diff > 0:#1e-15:
        return -1

if __name__ == "__main__":
    ret = main(sys.argv)
    exit(ret)
