@SOMA_PYTHON_SHEBANG@

#   Copyright (C) 2016-2019 Ludwig Schneider
#
# This file is part of SOMA.
#
# SOMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SOMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with SOMA.  If not, see <http://www.gnu.org/licenses/>.
import sys
sys.path.append( @SOMA_PYTHON_DIR@ )
import h5py
import argparse
import subprocess as sp


SOMA = "@CMAKE_CURRENT_BINARY_DIR@/../c_src/SOMA"
CONFGEN = "@CMAKE_CURRENT_BINARY_DIR@/../python_src/ConfGen.py"

def convert_files():
    ret = sp.call([CONFGEN,"-i","weight.xml"])
    if ret != 0: raise RuntimeError("Test failed")

def equilibrating(prefix,additional_flags):
    ret = sp.call(prefix+[SOMA,"-c","weight.h5","-t","40000"]+additional_flags)
    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call(["cp","end.h5","weight.h5"])
    if ret != 0: raise RuntimeError("Test failed")

def run(prefix,additional_flags):
    ret = sp.call(prefix+[SOMA,"-c","weight.h5","-t","20000","-a","weight_ana.h5"]+additional_flags)
    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call(["cp","end.h5","weight.h5"])
    if ret != 0: raise RuntimeError("Test failed")

def ana():
    with h5py.File("weight_ana.h5","r") as f:
        df = f["density_field"][:]
    df = df.astype(float)

    with h5py.File("weight.h5","r") as f:
        weights = f["parameter/density_weights"][:]

    #average time and not used spatial dimensions
    df = df.mean(axis=(0,3,4))

    theo_ratio = weights[0]/weights[1]
    actual_ratio = df[1].max()/df[0].max()

    err_msg ="theo ratio "+str(theo_ratio)+" actual ratio "+str(actual_ratio)
    print(err_msg)
    if abs(theo_ratio - actual_ratio) > 1e-1:
        raise RuntimeError("FAILURE: "+err_msg)

    # import matplotlib.pyplot as plt
                           # fig,ax = plt.subplots()

    # ax.set_xlabel("x-axis")
                           # ax.set_ylabel("number density")
                           # x = range(df.shape[1])
                           # ax.plot(x,df[0],label="A")
                           # ax.plot(x,df[1],label="B")

    # plt.savefig("weight.pdf",bbox_inches="tight")
                           # plt.close(fig)



def main(argv):
    parser = argparse.ArgumentParser(description = "Perform test to check the correct statistic results of SOMA.")
    parser.add_argument('--additional-flags',metavar="add-flags",type=str,help="Additional flags you might want to pass to SOMA for all tests.",default="" )
    parser.add_argument('--prefix',metavar="add-flags",type=str,help="Prefix before the call of SOMA",default="" )
    arguments =  parser.parse_args()

    prefix = []
    for element in arguments.prefix.split():
        if len(element) > 0:
            prefix.append(element.strip())
    additional_flags =[]
    for element in arguments.additional_flags.split():
        if len(element) > 0:
            additional_flags.append(element.strip())

    convert_files()
    equilibrating(prefix,additional_flags)
    run(prefix,additional_flags)
    ana()

    return 0


if __name__ == "__main__":
    ret = main(sys.argv)
    exit(ret)
