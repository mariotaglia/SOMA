#!/usr/bin/env python

#   Copyright (C) 2016-2017 Ludwig Schneider
#
# This file is part of SOMA.
#
# SOMA is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SOMA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with SOMA.  If not, see <http://www.gnu.org/licenses/>.
import sys
sys.path.append(@SOMA_PYTHON_DIR@)
import h5py
import argparse
import subprocess as sp
import numpy as np
SOMA = "@CMAKE_CURRENT_BINARY_DIR@/../c_src/SOMA"
CONFGEN = "@CMAKE_CURRENT_BINARY_DIR@/../python_src/ConfGen.py"

def convert_files():
    ret = sp.call([CONFGEN,"-i","async.xml"])
    ret = sp.call(["cp","async_ana.h5","async_ana_normal.h5"])
    ret = sp.call(["cp","async_ana.h5","async_ana_new.h5"])
    if ret != 0: raise RuntimeError("Test failed")

def run(test,extra_flags):
    ret = sp.call([SOMA,"-c","async.h5","-t","0"])
    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call(["mv","end.h5","async.h5"])
    if ret != 0: raise RuntimeError("Test failed")

    call_list = ["@MPIEXEC@","@MPIEXEC_NUMPROC_FLAG@","2",SOMA,"-c","async.h5","-t","10000","-a","async_ana_normal.h5","-r","1","--set-generation-algorithm=FIXED-N-SETS","--iteration-alg=SET"]+extra_flags
    print(call_list)
    ret = sp.call(call_list)
    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call(["mv","end.h5","async_normal.h5"])
    if ret != 0: raise RuntimeError("Test failed")
    call_list = ["@MPIEXEC@","@MPIEXEC_NUMPROC_FLAG@","2",SOMA,"-c","async.h5","-t","10000","-a","async_ana_new.h5","-r","1","--set-generation-algorithm=FIXED-N-SETS","--iteration-alg=SET",test]+extra_flags
    print(call_list)
    ret = sp.call(call_list)
    if ret != 0: raise RuntimeError("Test failed")
    ret = sp.call(["mv","end.h5","async_new.h5"])
    if ret != 0: raise RuntimeError("Test failed")

def test():
    f1 = h5py.File("async_ana_new.h5", 'r')
    h = h5py.File("async_ana_normal.h5", 'r')
    MSD_normal = np.asarray(list(h['/MSD']))
    MSD_new = np.asarray(list(f1['/MSD']))
    bonded_energy_normal= np.asarray(list(h['/bonded_energy']))
    bonded_energy_new= np.asarray(list(f1['/bonded_energy']))
    non_bonded_energy_normal= np.asarray(list(h['/non_bonded_energy']))
    non_bonded_energy_new= np.asarray(list(f1['/non_bonded_energy']))
    Re_normal = np.asarray(list(h['/Re']))
    Re_new = np.asarray(list(f1['/Re']))
    Rg_normal = np.asarray(list(h['/Rg']))
    Rg_new = np.asarray(list(f1['/Rg']))
    ret=0
    if (MSD_normal==MSD_new).any()!=True:
        ret=-1
    if (bonded_energy_normal==bonded_energy_new).any()!=True:
        ret=-1
    if (non_bonded_energy_normal==non_bonded_energy_new).any()!=True:
        ret=-1

    if (Re_normal==Re_new).any()!=True:
        ret=-1
    if (Rg_normal==Rg_new).any()!=True:
        ret=-1
    h.close
    f1.close
    return ret

def main_test(argv):
    tmp = argv[1]
    extra_flags = []
    for arg in tmp.split():
        extra_flags.append(arg.strip())

    print(extra_flags)
    convert_files()
    run("--long-chain-threshold=1",extra_flags)
    ret=test()
    return ret

if __name__ == "__main__":
    main_test(sys.argv)
